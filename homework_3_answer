Mage AI
Data Loader

import io
import pandas as pd
import requests
import pyarrow.parquet as pq
import datetime

if 'data_loader' not in globals():
    from mage_ai.data_preparation.decorators import data_loader
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@data_loader
def load_green_taxi_2022_data(*args, **kwargs):
    # URLs for Parquet files
    urls = [
        'https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-01.parquet',
        'https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-02.parquet',
        'https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-03.parquet',
        'https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-04.parquet',
        'https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-05.parquet',
        'https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-06.parquet',
        'https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-07.parquet',
        'https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-08.parquet',
        'https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-09.parquet',
        'https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-10.parquet',
        'https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-11.parquet',
        'https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-12.parquet'
    ]

    dataframes = []
    for url in urls:
        # Download Parquet file
        response = requests.get(url)
        # Read Parquet file into DataFrame
        table = pq.read_table(io.BytesIO(response.content))
        df = table.to_pandas()
        dataframes.append(df)

    # Concatenate the dataframes into a single dataframe
    df = pd.concat(dataframes, ignore_index=True)

    # Apply datetime conversion to lpep_pickup_datetime column
    df['lpep_pickup_datetime'] = df['lpep_pickup_datetime'].apply(lambda d: datetime.datetime.fromtimestamp(d.timestamp()).strftime('%Y-%m-%d %H:%M:%S'))
    
    return df


@test
def test_output(*outputs, **kwargs) -> None:
    """
    Template code for testing the output of the block.
    """
    assert all(output is not None for output in outputs), 'One or more outputs are undefined'
############################################################################################################

Data Exporter

from mage_ai.settings.repo import get_repo_path
from mage_ai.io.config import ConfigFileLoader
from mage_ai.io.google_cloud_storage import GoogleCloudStorage
from pandas import DataFrame
from os import path

if 'data_exporter' not in globals():
    from mage_ai.data_preparation.decorators import data_exporter


@data_exporter
def export_data_to_google_cloud_storage(df: DataFrame, **kwargs) -> None:

    config_path = path.join(get_repo_path(), 'io_config.yaml')
    config_profile = 'default'

    bucket_name = 'mage_zoomcamp_zukui'
    object_key = 'green_taxi_2022.parquet'

    GoogleCloudStorage.with_config(ConfigFileLoader(config_path, config_profile)).export(
        df,
        bucket_name,
        object_key,
    )

###########################################################################

1.	840,402

SELECT COUNT(*)
FROM `dtc-dez-412015.ny_taxi.green_taxi_2022` 

2.	0 MB for the External Table and 6.41MB for the Materialized Table

SELECT COUNT(DISTINCT PULocationID) AS distinct_PULocationIDs
FROM `dtc-dez-412015.ny_taxi.external_green_taxi_2022`
â€¢	Then check RESULTS -> Bytes processed

3.	1622

SELECT COUNT(*) AS number_with_zero_fare
FROM `dtc-dez-412015.ny_taxi.green_taxi_2022`
WHERE fare_amount = 0

4.	Partition by lpep_pickup_datetime Cluster on PUlocationID

CREATE TABLE `dtc-dez-412015.ny_taxi.green_taxi_non_partitioned`
CLUSTER BY PUlocationID
AS
SELECT * FROM `dtc-dez-412015.ny_taxi.green_taxi_2022`;


5.	22.82 MB for non-partitioned table and 647.87 MB for the partitioned table
-- Query for materialized table
SELECT DISTINCT PULocationID
FROM `dtc-dez-412015.ny_taxi.external_green_taxi_2022`
WHERE DATE(lpep_pickup_datetime) BETWEEN '2022-06-01' AND '2022-06-30';

-- Query for partitioned table = 23 MB
SELECT DISTINCT PULocationID
FROM `dtc-dez-412015.ny_taxi.green_taxi_non_partitioned`
WHERE DATE(lpep_pickup_datetime) BETWEEN '2022-06-01' AND '2022-06-30';


6.	Big Query
7.	False
